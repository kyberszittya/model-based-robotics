// automatically generated by Xtext
grammar hu.sze.aut.robot.kinematic.KinematicDsl with org.eclipse.xtext.common.Terminals

import "http://aut.sze.hu/kinematicmodel" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


RootElement returns RootElement:
	Robot | KinematicModule_Impl
;




Robot returns Robot:
	{Robot}
	'robot'	name=EString 'in' description_package=EString
	'{'
		(link+=Link (link+=Link)* )?
		(joint+=Joint (joint+=Joint)* )?
		(sensor+=Sensor (sensor+=Sensor)*)?
		(templateinstantiation+=TemplateInstantiation ( templateinstantiation+=TemplateInstantiation)* )?
		('root' root_element=[Link|EString])
		('controlmodel' controlmodel=ControlModel)?
	'}';



ControlModel returns ControlModel:
	DifferentialControlModel | CustomControlModel
;

DifferentialControlModel returns DifferentialRobotModel:
	{DifferentialRobotModel}
	'diffrobot' 'leftwheel' left_joint=EString 'rightwheel' right_joint=EString '(' 'separation' wheel_separation=EDouble 'diamater' wheel_diameter=EDouble ')'
;

CustomControlModel returns CustomControlModel:
	{CustomControlModel}
	'customcontrol'
;


KinematicModule_Impl returns KinematicModule:
	{KinematicModule}
	'kinematicmodule'
	name=EString
	'{'
		(link+=Link (link+=Link)*)?
		(joint+=Joint (joint+=Joint)* )?
		(sensor+=Sensor (sensor+=Sensor)*)?
		('root' root_element=[Link|EString])
	'}';


Sensor returns Sensor:
	Lidar | Scanner | Camera 
;


Lidar returns Lidar:
	{Lidar}
	'lidar' name=EString 'freq' freq=EDouble 'at' parent=[Link|EString] '(' 'ns' namespace=EString 'topic' topic_name=EString ')'
	'{'
		'horizontal' horizontal=BeamDefinition
		'vertical' vertical=BeamDefinition
		'range' range=RangeDefinition
	'}'
;

RangeDefinition returns RangeDefinition:
	{RangeDefinition}
	'min' min_range=EDouble
	'max' max_range=EDouble 
;

BeamDefinition returns BeamBlockDefinition:
	{BeamBlockDefinition}
	'min' min_angle=EDouble
	'max' max_angle=EDouble
	'resolution' resolution=EDouble
	'samples' samples=EInt
;


Camera returns Camera:
	{Camera}
	'camera' name=EString 'freq' freq=EDouble 'at' parent=[Link|EString]'(' 'ns' namespace=EString 'topic' topic_name=EString ')'
	'{'
		cameraobjective+=CameraObjective
		(cameraobjective+=CameraObjective)*
	'}'
;

CameraObjective returns CameraObjective:
	{CameraObjective}
	'objective' name=EString  'offset' offset=Pose 'fov' fov=EDouble 'clip' '{' 'near' clip_near=EDouble 'far' clip_far=EDouble '}' 'image' '{' image_width=EInt 'x' image_height=EInt '}'
;


Scanner returns LaserScanner:
	{LaserScanner}
	'scanner' name=EString 'freq' freq=EDouble 'at' parent=[Link|EString]'(' 'ns' namespace=EString 'topic' topic_name=EString ')'
	'{'
		'horizontal' horizontal=BeamDefinition
		'range' range=RangeDefinition
	'}'
;

KinematicModule returns KinematicModule:
	KinematicModule_Impl | Robot;



GeometryDescription returns GeometryDescription:
	Mesh | Cube | Cylinder | Sphere;

EString returns ecore::EString:
	STRING | ID;

Link returns Link:
	{Link}
	'link'
	name=EString
	'{'
		('pose' pose=Pose)?
		(inertia+=Inertia (  inertia+=Inertia)* )?
		(collision+=Collision ( collision+=Collision)* )?
		(visual+=Visual ( visual+=Visual)* )?
	'}';

Joint returns Joint:
	Joint_IMPL | SpringJoint
;

Joint_IMPL returns Joint:
	{Joint}
	(controlled?='controlled')? (jointtype=JointType) 'joint' name=EString ':' (parent=[Link|EString])?'->'(child=[Link|EString])? ('(' 'damping' damping=EDouble 'friction' friction=EDouble ')')?
	'{'	
		(axis=Axis)?	
		('pose' pose=Pose)?
		('jointconstraints' jointconstraints=JointConstraints)?
	'}';
	
SpringJoint returns SpringJoint:
	{SpringJoint}
	(controlled?='controlled')? (jointtype=JointType) 'joint' name=EString ':' (parent=[Link|EString])?'->'(child=[Link|EString])? ('(' 'damping' damping=EDouble 'friction' friction=EDouble ')')?
	'{'	
		'spring' '{' 'stiffness' stiffness=EDouble 'pos_reference' pos_reference=EDouble  'limits' '(' 'stiffness'limit_stiffness=EDouble 'reference' limit_reference=EDouble ')''}'
		(axis=Axis)?	
		('pose' pose=Pose)?
		('jointconstraints' jointconstraints=JointConstraints)?
	'}';

TemplateInstantiation returns TemplateInstantiation:
	{TemplateInstantiation}
	(negate?='mirror')? 'instantiate' (kinematicmodule=[KinematicModule|EString])? 'as' name=EString 'at' pose=Pose 'from' link=[Link|EString];

Pose returns Pose:
	{Pose}
	'{'
		(position=Position)?
		(rotation=Rotation)?		
	'}';

Inertia returns Inertia:
	{Inertia}
	'inertia' 'mass' mass=EDouble (inertiamatrix=InertiaMatrix)?;
	
InertiaMatrix returns InertiaMatrix:
	{InertiaMatrix}
	'{'
		('ixx' ixx=EDouble)?
		('ixy' ixy=EDouble)?
		('iyy' iyy=EDouble)?
		('ixz' ixz=EDouble)?
		('iyz' iyz=EDouble)?
		('izz' izz=EDouble)?
	'}'
;

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

EInt returns ecore::EInt:
	'-'? INT?;

Collision returns Collision:
	{Collision}
	'collision'
	'{'
		(geometrydescription=GeometryDescription)?
	'}';

Visual returns Visual:
	{Visual}
	'visual'
	'{'
		('offset' offset=Pose)?
		(geometrydescription=GeometryDescription)?
	'}';

Rotation returns Rotation:
	{Rotation}
	'rotation''{'
	('roll' roll=EDouble)?
	('pitch' pitch=EDouble)?
	('yaw' yaw=EDouble)?
	'}'
	;

Position returns Position:
	{Position}
	'position''{'
	('x' x=EDouble)?
	('y' y=EDouble)?
	('z' z=EDouble)?
	'}'
	;

Mesh returns Mesh:
	{Mesh}
	'mesh' 'of' filepath=EString ('scale' sx=EDouble',' sy=EDouble',' sz=EDouble)?
	;

Cube returns Cube:
	{Cube}
	'cube'	('sx' sx=EDouble)?	('sy' sy=EDouble)?	('sz' sz=EDouble)?;

Cylinder returns Cylinder:
	{Cylinder}
	'cylinder'	('radius' radius=EDouble)?	('height' height=EDouble)?;

Sphere returns Sphere:
	{Sphere}
	'sphere'('radius' radius=EDouble)?;

JointConstraints returns JointConstraints:
	{JointConstraints}
	'constraints'
	'{'
		('min_limit' min_limit=EDouble)?
		('max_limit' max_limit=EDouble)?
	'}';

Axis returns Axis:
	{Axis}
	'axis'	ax=EDouble','ay=EDouble','az=EDouble;

enum JointType returns JointType:
				Translational = 'translational' | Rotational = 'rotational' | Continuous = 'continuous' | Fixed = 'fixed';


