// automatically generated by Xtext
grammar hu.sze.aut.robot.kinematic.KinematicDsl with org.eclipse.xtext.common.Terminals

import "http://aut.sze.hu/kinematicmodel" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


RootElement returns RootElement:
	Robot | KinematicModule_Impl
;



KinematicModule_Impl returns KinematicModule:
	{KinematicModule}
	'module' name=EString
	'{'
		(link+=Link (link+=Link)*)?
		('root' root_element=[Link|EString])
		(joint+=Joint (joint+=Joint)* )?
		(sensor+=Sensor (sensor+=Sensor)*)?
		
	'}';

Robot returns Robot:
	{Robot}
	'robot'	description_package=EString'::'name=EString  'format' (description_format+=EString(',' description_format+=EString)*)
	'{'
		(link+=Link (link+=Link)* )?
		('root' root_element=[Link|EString])
		(joint+=Joint (joint+=Joint)* )?
		(sensor+=Sensor (sensor+=Sensor)*)?
		(templateinstantiation+=TemplateInstantiation ( templateinstantiation+=TemplateInstantiation)* )?
		('controlmodel' controlmodel=ControlModel)?
	'}';



ControlModel returns ControlModel:
	DifferentialControlModel | CustomControlModel
;

DifferentialControlModel returns DifferentialRobotModel:
	{DifferentialRobotModel}
	'diffrobot' 'leftwheel' left_joint=EString 'rightwheel' right_joint=EString '(' 'separation' wheel_separation=EDouble 'diamater' wheel_diameter=EDouble ')'
;

CustomControlModel returns CustomControlModel:
	{CustomControlModel}
	'customcontrol'
;




Sensor returns Sensor:
	Lidar | Scanner | Camera | GpsSensor | ImuSensor
;


Lidar returns Lidar:
	{Lidar}
	parent=[Link|EString] '->' 'lidar' namespace=EString '::' name=EString  '(' topic_name=EString ':' freq=EDouble ')'
	'{'
		'horizontal' horizontal=BeamDefinition
		'vertical' vertical=BeamDefinition
		'range' range=RangeDefinition
	'}'
;

RangeDefinition returns RangeDefinition:
	{RangeDefinition}
	'[' min_range=EDouble ',' max_range=EDouble ']' 
;

BeamDefinition returns BeamBlockDefinition:
	{BeamBlockDefinition}
	'[' min_angle=EDouble ',' max_angle=EDouble ']' ':' '[' resolution=EDouble ':' samples=EInt ']'
;


Camera returns Camera:
	{Camera}
	parent=[Link|EString] '->' 'camera' namespace=EString '::' name=EString  '(' topic_name=EString ':' freq=EDouble ')' 
	'{'
		cameraobjective+=CameraObjective
		(cameraobjective+=CameraObjective)*
	'}'
;

CameraObjective returns CameraObjective:
	{CameraObjective}
	'objective' name=EString  'fov' fov=EDouble 'clipping' '[' clip_near=EDouble ',' clip_far=EDouble ']' 'image' '[' image_width=EInt ',' image_height=EInt ']' 'at' offset=Pose 
;

Scanner returns LaserScanner:
	{LaserScanner}
	parent=[Link|EString] '->' 'scanner' namespace=EString '::' name=EString '(' topic_name=EString ':' freq=EDouble ')'
	'{'
		'horizontal' horizontal=BeamDefinition
		'range' range=RangeDefinition
	'}'
;


GpsSensor returns GpsSensor:
	{GpsSensor}
	parent=[Link|EString] '->' 'gps' namespace=EString '::' name=EString  '(' topic_name=EString ':' 'hz' freq=EDouble ')' 
	'{'	
	'}';

ImuSensor returns ImuSensor:
	{ImuSensor}
	parent=[Link|EString] '->' 'imu' namespace=EString  '::'name=EString '(' topic_name=EString ':' 'hz' freq=EDouble ')'
	'{'
	'}'
;



KinematicModule returns KinematicModule:
	KinematicModule_Impl | Robot;



GeometryDescription returns GeometryDescription:
	Mesh | Cube | Cylinder | Sphere;

EString returns ecore::EString:
	STRING | ID;

Link returns Link:
	{Link}
	'link' name=EString ('at' pose=Pose)?
	'{'		
		(inertia+=Inertia (  inertia+=Inertia)* )?
		(collision+=Collision ( collision+=Collision)* )?
		(visual+=Visual ( visual+=Visual)* )?
		/*
		('friction'
		'{'		
		(translationalfriction=TransationalFriction)?
		(torsionalfriction=TorsionalFriction)?
		'}')?
		* 
		*/
	'}';
	
TransationalFriction returns TranslationalFriction:
	{TranslationalFriction} 
	'translational' '['mu=EDouble ',' mu2=EDouble']' (axis=Axis)?
;

TorsionalFriction returns TorsionalFriction:
	{TorsionalFriction}
	'torsional' '[' coeffictient=EDouble ',''r' ':=' patch_radius=EDouble ']'
;


Joint returns Joint:
	Joint_IMPL | SpringJoint
;

Joint_IMPL returns Joint:
	{Joint}
	(parent=[Link|EString])?'->'(child=[Link|EString])? (jointtype=JointType) name=EString ('(' 'damping' damping=EDouble 'friction' friction=EDouble ')')?  ('to' pose=Pose)? (axis=Axis)?
	'{'		
		(jointcontrol=JointControl)?
		('constr' jointconstraints=JointConstraints)?
	'}';
	
SpringJoint returns SpringJoint:
	{SpringJoint}
	(parent=[Link|EString])?'->'(child=[Link|EString])? (jointtype=JointType) name=EString ('(' 'damping' damping=EDouble 'friction' friction=EDouble ')')?  ('to' pose=Pose)? (axis=Axis)?
	'{'	
		(jointcontrol=JointControl)?
		('constr' jointconstraints=JointConstraints)?
		'spring' ':' 'stiffness' '['stiffness=EDouble':' limit_stiffness=EDouble']' 'pos' '['pos_reference=EDouble  ':' limit_reference=EDouble ']'
	'}';
	
JointControl returns JointControl:
	{JointControl}
	'control' 'on' type=JointControlType
	;

enum JointControlType returns JointControlType:
	Position = 'position' | Velocity = 'velocity' | Effort = 'effort';

TemplateInstantiation returns TemplateInstantiation:
	{TemplateInstantiation}
	(invert?='inv')? 'place' link=[Link|EString] '->' name=EString'('(kinematicmodule=[KinematicModule|EString])')' 'at' pose=Pose;

Pose returns Pose:
	{Pose}
	    '['
		(position=Position)
		(';'rotation=Rotation)?
		']'		
	;

Inertia returns Inertia:
	{Inertia}
	'inertia' 'mass' mass=EDouble (inertiamatrix=InertiaMatrix)? ('coi' pose=Pose)?;
	
InertiaMatrix returns InertiaMatrix:
	{InertiaMatrix}
	'imtx'
	'[' 
		(ixx=EDouble ',')
		(iyy=EDouble ',')
		(izz=EDouble)		
		(
			';'
		(ixy=EDouble ',')	
		(ixz=EDouble ',')
		(iyz=EDouble)
		
		)?
	']'
	
;

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

EInt returns ecore::EInt:
	'-'? INT?;

Collision returns Collision:
	{Collision}
	'collision' ('(' 'at' offset=Pose ')')?
	'{'
		(geometrydescription=GeometryDescription)?
	'}';

Visual returns Visual:
	{Visual}
	'visual' ('(' 'at' offset=Pose ')')?
	'{'
		(geometrydescription=GeometryDescription)?
	'}';

Rotation returns Rotation:
	{Rotation}
	(roll=EDouble ',')
	(pitch=EDouble ',')
	(yaw=EDouble)
	;

Position returns Position:
	{Position}
	(x=EDouble',')
	(y=EDouble',')
	(z=EDouble)
	;

Mesh returns Mesh:
	{Mesh}
	'mesh' '('filepath=EString ('['sx=EDouble',' sy=EDouble',' sz=EDouble ']')? ')'
	;

Cube returns Cube:
	{Cube}
	'cube'	'[' sx=EDouble ',' sy=EDouble ',' sz=EDouble ']';

Cylinder returns Cylinder:
	{Cylinder}
	'cylinder'	'['( radius=EDouble ',')	(height=EDouble) ']';

Sphere returns Sphere:
	{Sphere}
	'sphere'(':' radius=EDouble)?;

JointConstraints returns JointConstraints:
	{JointConstraints}
	'limits'('[' min_limit=EDouble)?(max_limit=EDouble ']')? ;

Axis returns Axis:
	{Axis}
	'ax' '['	ax=EDouble','ay=EDouble','az=EDouble ']';

enum JointType returns JointType:
				Translational = 'translational' | Rotational = 'rotational' | Continuous = 'continuous' | Fixed = 'fixed';


