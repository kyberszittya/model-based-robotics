// automatically generated by Xtext
grammar hu.sze.aut.robotics.vehicle.VehicleDsl with org.eclipse.xtext.common.Terminals

import "http://aut.sze.hu/vehiclemodel" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

EntryPoint returns RootElement:
	Vehicle | Catalogue
;

Catalogue returns Catalogue:
	{Catalogue}
	'catalogue' name=EString '{'
	('sensor' 
	'{' 
		sensor+=Sensor 
		(sensor+=Sensor)* 
	'}' )?
	'}'
;

Vehicle returns Vehicle:
	{Vehicle}
	'vehicle'
	name=EString
	'{'	 
		axes+=Axis 
		(axes+=Axis)* 
		(wheelparameters+=WheelParameter)
		(wheelparameters+=WheelParameter)*
		(physicalparameter=PhysicalParameter)
		sensorplacement+=SensorPlacement 
		(sensorplacement+=SensorPlacement)*
	'}';

SensorPlacement returns SensorPlacement:
	{SensorPlacement}
	'placement' name=EString 'of' sensor=[Sensor|EString] 'in' frame=EString 'at' pose=Pose
;

Sensor returns Sensor:
	LiDAR | Camera | StereoCamera | GPS | IMU | LaserScanner;



EString returns ecore::EString:
	STRING | ID;

Axis returns Axis:
	{Axis}	
	'axis' name=EString ':' type=AxisType 
	'{'
		('length' length=EDouble)?
		('radius' radius=EDouble)?		
		('pose' pose=Pose)
		transmission+=Transmission 
		(transmission+=Transmission)*
		
	'}';

WheelParameter returns WheelParameter:
	{WheelParameter}
	'wheelparameter' name=EString
	'{'
		('radius' radius=EDouble)?
		('width' width=EDouble)?
	'}';

PhysicalParameter returns PhysicalParameter:
	{PhysicalParameter}
	'physicalparameter'
	'{'
		('baselength' baselength=EDouble)?
		('mass' mass=EDouble)?
	'}';

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

Transmission returns Transmission:
	{Transmission}
	(driven?='driven')? 'transmission' name=EString
	'{'
		'ratio'':'transmission_ratio=EDouble
		wheel+=Wheel ( wheel+=Wheel)*
		('offset' offset=Pose)?
	'}';

enum AxisType returns AxisType:
				NoSteer = 'nosteer' | AckermannSteer = 'ackermann' 
				| Independent = 'independent' | Caster = 'caster';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

Pose returns Pose:
	{Pose}
	'{'
		('displacement' displacement=Displacement)?
		('rotation' rotation=Rotation)?
	'}';

Wheel returns Wheel:
	{Wheel}
	'wheel' name=EString
	'{'
		('wheelparameter' wheelparameters=[WheelParameter|EString])?
		('offset' offset=Pose)?
	'}';

Displacement returns Displacement:
	{Displacement}	
	('x'':' x=EDouble)','
	('y'':' y=EDouble)','
	('z'':' z=EDouble);

Rotation returns Rotation:
	{Rotation}
	('roll'':' roll=EDouble)','
	('pitch'':' pitch=EDouble)','
	('yaw'':' yaw=EDouble);

LiDAR returns LiDAR:
	{LiDAR}
	'LiDAR'	name=EString':' 'freq' frequency=EDouble 'on' topic_name=EString
	'{'
		'min_distance' ':' min_distance=EDouble
		'max_distance' ':' max_distance=EDouble
		'meas_per_rotations'':' meas_per_rotation=EInt
		'fov'':' field_of_view=EDouble
		'center_angle'':' center_angle=EDouble 
	'}'
	;

EInt returns ecore::EInt:
	'-'? INT;
	
enum CameraColorFormat returns CameraColorFormat:
	Color='color' | GrayScale='gray'
;

GPS returns GPS:
	{GPS}
	'gps' name=EString':' 'freq' frequency=EDouble 'on' topic_name=EString (odometry?='odometry')?
	'{'
		
	'}'
;

IMU returns IMU:
	{IMU}
	'imu' name=EString':' 'freq' frequency=EDouble 'on' topic_name=EString
	'{'
	'}'
;

LaserScanner returns LaserScanner:
	{LaserScanner}
	'laser' name=EString':' 'freq' frequency=EDouble 'on' topic_name=EString
	'{'		
	'}'
;

Camera returns Camera:
	{Camera}
	'monocamera' name=EString':' 'freq' frequency=EDouble 'on' topic_name=EString
	'{'
		'fov'':' field_of_view=EDouble
		'quality' ':' quality=EInt		
		'min_distance' ':' min_distance=EDouble
		'max_distance' ':' max_distance=EDouble
		'color_format' ':' color_format=CameraColorFormat
		'image_width' ':' image_width=EInt
		'image_height' ':' image_height=EInt
		// Subsensors		
		('subsensors'':''{'
			subsensor+=Sensor (subsensor+=Sensor)*
		'}' )?
	'}';

StereoCamera returns StereoCamera:
	{StereoCamera}
	'stereocamera' name=EString':' 'freq' frequency=EDouble 'on' topic_name=EString
	'{'
		'baseline'':' baseline=EDouble
		'fov'':' field_of_view=EDouble
		'quality' ':' quality=EInt		
		'min_distance' ':' min_distance=EDouble
		'max_distance' ':' max_distance=EDouble
		'color_format' ':' color_format=CameraColorFormat
		'image_width' ':' image_width=EInt
		'image_height' ':' image_height=EInt
		// Subsensors		
		('subsensors'':''{'
			subsensor+=Sensor (subsensor+=Sensor)*
		'}')? 
	'}';