// automatically generated by Xtext
grammar hu.sze.aut.robotics.vehicle.VehicleDsl with org.eclipse.xtext.common.Terminals

import "http://aut.sze.hu/vehiclemodel" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

EntryPoint returns RootElement:
	Vehicle | Catalogue
;

Catalogue returns Catalogue:
	{Catalogue}
	'catalogue' name=EString
	('sensor' 
	'{' 
		sensor+=Sensor 
		(sensor+=Sensor)* 
	'}' )?
;

Vehicle returns Vehicle:
	{Vehicle}
	'vehicle'
	name=EString
	'{'
		('axes' 
		'{' 
			axes+=Axis 
			(axes+=Axis)* 
		'}' )?
		(wheelparameters=WheelParameter)
		
		(physicalparameter=PhysicalParameter)
	'}';



Sensor returns Sensor:
	LiDAR | Camera;



EString returns ecore::EString:
	STRING | ID;

Axis returns Axis:
	{Axis}	
	(driven?='driven')? 'axis' name=EString ':' type=AxisType 
	'{'
		('length' length=EDouble)?
		('radius' radius=EDouble)?		
		(pose=Pose)
		('drive' 
		'{' 
			drive+=Drive 
			(drive+=Drive)* 
		'}' )?
		
	'}';

WheelParameter returns WheelParameter:
	{WheelParameter}
	'wheelparameter' name=EString
	'{'
		('radius' radius=EDouble)?
		('width' width=EDouble)?
	'}';

PhysicalParameter returns PhysicalParameter:
	{PhysicalParameter}
	'physicalparameter'
	'{'
		('baselength' baselength=EDouble)?
		('mass' mass=EDouble)?
	'}';

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

Drive returns Drive:
	{Drive}
	'Drive'
	'{'
		('wheel' '{' wheel+=Wheel ( "," wheel+=Wheel)* '}' )?
	'}';

enum AxisType returns AxisType:
				NoSteer = 'NoSteer' | AckermannSteer = 'AckermannSteer' | Independent = 'Independent';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

Pose returns Pose:
	{Pose}
	'pose'
	'{'
		('displacement' displacement=Displacement)?
		('rotation' rotation=Rotation)?
	'}';

Wheel returns Wheel:
	{Wheel}
	'Wheel'
	'{'
		('transmission_ratio' transmission_ratio=EDouble)?
		('wheelparameters' wheelparameters=[WheelParameter|EString])?
		('pose' pose=Pose)?
	'}';

Displacement returns Displacement:
	{Displacement}	
	('x'':' x=EDouble)','
	('y'':' y=EDouble)','
	('z'':' z=EDouble);

Rotation returns Rotation:
	{Rotation}
	('roll'':' roll=EDouble)','
	('pitch'':' pitch=EDouble)','
	('yaw'':' yaw=EDouble);

LiDAR returns LiDAR:
	{LiDAR}
	'LiDAR'	name=EString':' 'freq' frequency=EDouble 'in' 'frame' frame=EString
	'{'
		'min_distance' ':' min_distance=EDouble
		'max_distance' ':' max_distance=EDouble
	'}'
	;

EInt returns ecore::EInt:
	'-'? INT;
	
enum CameraColorFormat returns CameraColorFormat:
	Color='color' | GrayScale='gray'
;

Camera returns Camera:
	{Camera}
	'monocamera' name=EString':' 'freq' frequency=EDouble 'in' 'frame' frame=EString
	'{'
		'fov'':' field_of_view=EDouble
		'quality' ':' quality=EInt		
		'min_distance' ':' min_distance=EDouble
		'max_distance' ':' max_distance=EDouble
		'color_format' ':' color_format=CameraColorFormat
		'image_width' ':' image_width=EInt
		'image_height' ':' image_height=EInt
	'}';

StereoCamera returns StereoCamera:
	{StereoCamera}
	'stereocamera' name=EString':' 'freq' frequency=EDouble 'in' 'frame' frame=EString
	'{'
		'fov'':' field_of_view=EDouble
		'quality' ':' quality=EInt		
		'min_distance' ':' min_distance=EDouble
		'max_distance' ':' max_distance=EDouble
		'color_format' ':' color_format=CameraColorFormat
		'image_width' ':' image_width=EInt
		'image_height' ':' image_height=EInt
	'}';