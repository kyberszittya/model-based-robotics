// automatically generated by Xtext
grammar hu.sze.aut.robotics.vehicle.VehicleDsl with org.eclipse.xtext.common.Terminals

import "http://aut.sze.hu/vehiclemodel" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Vehicle returns Vehicle:
	{Vehicle}
	'Vehicle'
	name=EString
	'{'
		('axis' '{' axis+=Axis ( "," axis+=Axis)* '}' )?
		('wheelparameters' '{' wheelparameters+=WheelParameter ( "," wheelparameters+=WheelParameter)* '}' )?
		('sensor' '{' sensor+=Sensor ( "," sensor+=Sensor)* '}' )?
		('physicalparameter' '{' physicalparameter+=PhysicalParameter ( "," physicalparameter+=PhysicalParameter)* '}' )?
	'}';



Sensor returns Sensor:
	LiDAR | Camera;







EString returns ecore::EString:
	STRING | ID;

Axis returns Axis:
	{Axis}
	(driven?='driven')?
	'Axis'
	name=EString
	'{'
		('length' length=EDouble)?
		('radius' radius=EDouble)?
		('type' type=AxisType)?
		('drive' '{' drive+=Drive ( "," drive+=Drive)* '}' )?
		('pose' pose=Pose)?
	'}';

WheelParameter returns WheelParameter:
	{WheelParameter}
	'WheelParameter'
	name=EString
	'{'
		('radius' radius=EDouble)?
		('width' width=EDouble)?
	'}';

PhysicalParameter returns PhysicalParameter:
	{PhysicalParameter}
	'PhysicalParameter'
	'{'
		('baselength' baselength=EDouble)?
		('mass' mass=EDouble)?
	'}';

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

Drive returns Drive:
	{Drive}
	'Drive'
	'{'
		('wheel' '{' wheel+=Wheel ( "," wheel+=Wheel)* '}' )?
	'}';

enum AxisType returns AxisType:
				NoSteer = 'NoSteer' | AckermannSteer = 'AckermannSteer' | Independent = 'Independent';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

Pose returns Pose:
	{Pose}
	'Pose'
	'{'
		('displacement' displacement=Displacement)?
		('rotation' rotation=Rotation)?
	'}';

Wheel returns Wheel:
	{Wheel}
	'Wheel'
	'{'
		('transmission_ratio' transmission_ratio=EDouble)?
		('wheelparameters' wheelparameters=[WheelParameter|EString])?
		('pose' pose=Pose)?
	'}';

Displacement returns Displacement:
	{Displacement}
	'Displacement'
	'{'
		('x' x=EDouble)?
		('y' y=EDouble)?
		('z' z=EDouble)?
	'}';

Rotation returns Rotation:
	{Rotation}
	'Rotation'
	'{'
		('roll' roll=EDouble)?
		('pitch' pitch=EDouble)?
		('yaw' yaw=EDouble)?
	'}';

LiDAR returns LiDAR:
	{LiDAR}
	'LiDAR'
	name=EString;

Camera returns Camera:
	{Camera}
	'Camera'
	name=EString;
